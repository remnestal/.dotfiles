# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# http://flight-manual.atom.io/using-atom/sections/basic-customization/#_cson

'.source.go':
  'Request logger':
    'prefix': 'req'
    'body': 'reqLogger := logging.GetRequestLoggerFromContext(r.Context())'
  'Marshal payload':
    'prefix': 'payload'
    'body':"""
// Prepare response payload
payload, err := json.Marshal($1)
if err != nil {
	reqLogger.WithError(err).Errorln("Unable to marshal response")
	w.WriteHeader(http.StatusInternalServerError)
	return
}
$2
"""
  'Write response':
    'prefix': 'response'
    'body': """
// Write response
if _, err = w.Write(payload); err != nil {
  reqLogger.WithError(err).Errorln("Unable to write response")
  return
}$1
"""
  'New handler file':
    'prefix': 'imports'
    'body': """
import (
  "encoding/json"
  "net/http"

  "gitlab.com/abios/$1/logging"
)
$2
"""
  'JSON struct tag':
    'prefix': 'json'
    'body': '`json:"$1"`$2'
